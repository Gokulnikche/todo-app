{"ast":null,"code":"import { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, LOGOUT_SUCCESS } from '../actionTypes';\nexport const loginUser = ({\n  username,\n  password\n}) => {\n  return dispatch => {\n    dispatch({\n      type: LOGIN_REQUEST\n    });\n    // Mocking an API call\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (username === 'test' && password === 'password') {\n          dispatch({\n            type: LOGIN_SUCCESS\n          });\n          resolve();\n        } else {\n          const error = 'Invalid credentials';\n          dispatch({\n            type: LOGIN_FAILURE,\n            payload: error\n          });\n          reject(new Error(error));\n        }\n      }, 1000);\n    });\n  };\n};\nexport const logoutUser = () => {\n  return dispatch => {\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n  };\n};","map":{"version":3,"names":["LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT_SUCCESS","loginUser","username","password","dispatch","type","Promise","resolve","reject","setTimeout","error","payload","Error","logoutUser"],"sources":["C:/Users/ruthr/OneDrive/Desktop/React To-do-app/todo-app/src/redux/actions/userActions.js"],"sourcesContent":["import {\r\n    LOGIN_REQUEST,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAILURE,\r\n    LOGOUT_SUCCESS\r\n  } from '../actionTypes';\r\n  \r\n  export const loginUser = ({ username, password }) => {\r\n    return dispatch => {\r\n      dispatch({ type: LOGIN_REQUEST });\r\n      // Mocking an API call\r\n      return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n          if (username === 'test' && password === 'password') {\r\n            dispatch({ type: LOGIN_SUCCESS });\r\n            resolve();\r\n          } else {\r\n            const error = 'Invalid credentials';\r\n            dispatch({ type: LOGIN_FAILURE, payload: error });\r\n            reject(new Error(error));\r\n          }\r\n        }, 1000);\r\n      });\r\n    };\r\n  };\r\n  \r\n  export const logoutUser = () => {\r\n    return dispatch => {\r\n      dispatch({ type: LOGOUT_SUCCESS });\r\n    };\r\n  };\r\n  "],"mappings":"AAAA,SACIA,aAAa,EACbC,aAAa,EACbC,aAAa,EACbC,cAAc,QACT,gBAAgB;AAEvB,OAAO,MAAMC,SAAS,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAS,CAAC,KAAK;EACnD,OAAOC,QAAQ,IAAI;IACjBA,QAAQ,CAAC;MAAEC,IAAI,EAAER;IAAc,CAAC,CAAC;IACjC;IACA,OAAO,IAAIS,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtCC,UAAU,CAAC,MAAM;QACf,IAAIP,QAAQ,KAAK,MAAM,IAAIC,QAAQ,KAAK,UAAU,EAAE;UAClDC,QAAQ,CAAC;YAAEC,IAAI,EAAEP;UAAc,CAAC,CAAC;UACjCS,OAAO,CAAC,CAAC;QACX,CAAC,MAAM;UACL,MAAMG,KAAK,GAAG,qBAAqB;UACnCN,QAAQ,CAAC;YAAEC,IAAI,EAAEN,aAAa;YAAEY,OAAO,EAAED;UAAM,CAAC,CAAC;UACjDF,MAAM,CAAC,IAAII,KAAK,CAACF,KAAK,CAAC,CAAC;QAC1B;MACF,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;EACJ,CAAC;AACH,CAAC;AAED,OAAO,MAAMG,UAAU,GAAGA,CAAA,KAAM;EAC9B,OAAOT,QAAQ,IAAI;IACjBA,QAAQ,CAAC;MAAEC,IAAI,EAAEL;IAAe,CAAC,CAAC;EACpC,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}